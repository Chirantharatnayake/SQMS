<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/queuemanagmentsystem/CustomerProfileScreenTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/queuemanagmentsystem/CustomerProfileScreenTest.kt" />
              <option name="updatedContent" value="package com.example.queuemanagmentsystem&#10;&#10;import androidx.compose.ui.test.assertIsDisplayed&#10;import androidx.compose.ui.test.junit4.createAndroidComposeRule&#10;import androidx.compose.ui.test.onNodeWithTag&#10;import androidx.compose.ui.test.performClick&#10;import androidx.compose.ui.test.performTextInput&#10;import org.junit.Rule&#10;import org.junit.Test&#10;&#10;/**&#10; * Basic UI automation tests for the Customer Profile screen using Jetpack Compose testing APIs (runs with Espresso).&#10; * These tests verify that the customer profile components are present, dark mode toggle works,&#10; * profile picture functionality works, and logout functionality works properly.&#10; */&#10;class CustomerProfileScreenTest {&#10;&#10;    @get:Rule&#10;    val composeRule = createAndroidComposeRule&lt;MainActivity&gt;()&#10;&#10;    private fun navigateToCustomerProfileScreen() {&#10;        // Navigate from Register -&gt; Login -&gt; Customer Home -&gt; Account Tab&#10;        // First go to login page&#10;        composeRule.onNodeWithTag(&quot;goToLoginButton&quot;).performClick()&#10;        &#10;        // Fill in valid credentials and login&#10;        composeRule.onNodeWithTag(&quot;emailInput&quot;).performTextInput(&quot;test@example.com&quot;)&#10;        composeRule.onNodeWithTag(&quot;passwordInput&quot;).performTextInput(&quot;password123&quot;)&#10;        composeRule.onNodeWithTag(&quot;loginButton&quot;).performClick()&#10;        &#10;        // Navigate to account/profile tab from customer home&#10;        // This assumes bottom navigation exists to reach the profile&#10;    }&#10;&#10;    @Test&#10;    fun customerProfileScreenIsDisplayed() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;customerProfileScreen&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileContent&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun profileInfoCardIsDisplayed() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;profileInfoCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerNameText&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerEmailCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerEmailText&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun profileAvatarAndImageAreDisplayed() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileImage&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileCameraButton&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun profileAvatarIsClickable() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).performClick()&#10;        // Should trigger image picker (gallery/camera access)&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun cameraButtonIsClickable() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;customerProfileCameraButton&quot;).performClick()&#10;        // Should also trigger image picker&#10;        composeRule.onNodeWithTag(&quot;customerProfileCameraButton&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun preferencesCardIsDisplayed() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;preferencesCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;preferencesHeader&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun darkModeToggleComponentsAreDisplayed() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleIcon&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleTitle&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleDescription&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun darkModeToggleSwitchIsClickable() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;        // Should toggle dark mode on/off&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun accountActionsCardIsDisplayed() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;accountActionsCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;accountActionsHeader&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun customerLogoutButtonIsClickable() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).performClick()&#10;        // Should sign out and navigate to register screen&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun bottomNavigationIsDisplayed() {&#10;        navigateToCustomerProfileScreen()&#10;        composeRule.onNodeWithTag(&quot;customerProfileBottomNav&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun allMainProfileElementsAreDisplayedTogether() {&#10;        navigateToCustomerProfileScreen()&#10;        // Verify all main profile components are visible simultaneously&#10;        composeRule.onNodeWithTag(&quot;profileInfoCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerNameText&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerEmailText&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;preferencesCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;accountActionsCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileBottomNav&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun customerProfileScreenLayout() {&#10;        navigateToCustomerProfileScreen()&#10;        &#10;        // Verify the complete layout structure&#10;        composeRule.onNodeWithTag(&quot;customerProfileScreen&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileContent&quot;).assertIsDisplayed()&#10;        &#10;        // Profile info section&#10;        composeRule.onNodeWithTag(&quot;profileInfoCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerNameText&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerEmailCard&quot;).assertIsDisplayed()&#10;        &#10;        // Preferences section&#10;        composeRule.onNodeWithTag(&quot;preferencesCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleCard&quot;).assertIsDisplayed()&#10;        &#10;        // Account actions section&#10;        composeRule.onNodeWithTag(&quot;accountActionsCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).assertIsDisplayed()&#10;        &#10;        // Navigation section&#10;        composeRule.onNodeWithTag(&quot;customerProfileBottomNav&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun profileImageManagement() {&#10;        navigateToCustomerProfileScreen()&#10;        &#10;        // Test profile image interaction&#10;        composeRule.onNodeWithTag(&quot;customerProfileImage&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileCameraButton&quot;).assertIsDisplayed()&#10;        &#10;        // Click avatar to change image&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).performClick()&#10;        &#10;        // Click camera button to change image&#10;        composeRule.onNodeWithTag(&quot;customerProfileCameraButton&quot;).performClick()&#10;        &#10;        // Verify image components remain functional&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileImage&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun darkModeToggleFunctionality() {&#10;        navigateToCustomerProfileScreen()&#10;        &#10;        // Test dark mode toggle functionality&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).assertIsDisplayed()&#10;        &#10;        // Toggle dark mode on&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;        &#10;        // Verify toggle components remain visible&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleIcon&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleTitle&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleDescription&quot;).assertIsDisplayed()&#10;        &#10;        // Toggle dark mode off&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;        &#10;        // Verify components still work&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun customerInformationDisplay() {&#10;        navigateToCustomerProfileScreen()&#10;        &#10;        // Verify customer information is displayed&#10;        composeRule.onNodeWithTag(&quot;customerNameText&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerEmailText&quot;).assertIsDisplayed()&#10;        &#10;        // Customer name should show either &quot;Loading...&quot; or actual name&#10;        // Customer email should show the logged-in user's email&#10;    }&#10;&#10;    @Test&#10;    fun profileElementsRemainVisibleAfterInteractions() {&#10;        navigateToCustomerProfileScreen()&#10;        &#10;        // Interact with various elements&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;customerProfileCameraButton&quot;).performClick()&#10;        &#10;        // Verify all profile elements are still visible&#10;        composeRule.onNodeWithTag(&quot;profileInfoCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerNameText&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;preferencesCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;accountActionsCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun completeCustomerProfileFlow() {&#10;        navigateToCustomerProfileScreen()&#10;        &#10;        // Complete profile management flow&#10;        // 1. View profile information&#10;        composeRule.onNodeWithTag(&quot;customerNameText&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerEmailText&quot;).assertIsDisplayed()&#10;        &#10;        // 2. Change profile picture&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).performClick()&#10;        &#10;        // 3. Toggle dark mode&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;        &#10;        // 4. Attempt logout&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).performClick()&#10;        &#10;        // Verify the flow completed without crashes&#10;        composeRule.onNodeWithTag(&quot;customerProfileScreen&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun multipleInteractionsStability() {&#10;        navigateToCustomerProfileScreen()&#10;        &#10;        // Perform multiple interactions to test UI stability&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;customerProfileCameraButton&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).performClick()&#10;        &#10;        // After multiple interactions, verify key elements remain functional&#10;        composeRule.onNodeWithTag(&quot;customerProfileScreen&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;profileInfoCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;preferencesCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;accountActionsCard&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun enhancedProfileFeatures() {&#10;        navigateToCustomerProfileScreen()&#10;        &#10;        // Test enhanced profile features&#10;        // 1. Profile avatar with camera overlay&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerProfileCameraButton&quot;).assertIsDisplayed()&#10;        &#10;        // 2. Enhanced dark mode toggle with description&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleDescription&quot;).assertIsDisplayed()&#10;        &#10;        // 3. Account actions section&#10;        composeRule.onNodeWithTag(&quot;accountActionsHeader&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).assertIsDisplayed()&#10;        &#10;        // All enhanced features should be functional&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;    }&#10;&#10;    @Test&#10;    fun animatedProfileInterface() {&#10;        navigateToCustomerProfileScreen()&#10;        &#10;        // Test that animated elements are displayed&#10;        // The animations should complete and elements should be visible&#10;        composeRule.onNodeWithTag(&quot;profileInfoCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;preferencesCard&quot;).assertIsDisplayed()&#10;        composeRule.onNodeWithTag(&quot;accountActionsCard&quot;).assertIsDisplayed()&#10;        &#10;        // All animated sections should be functional after animations&#10;        composeRule.onNodeWithTag(&quot;customerProfileAvatar&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;darkModeToggleSwitch&quot;).performClick()&#10;        composeRule.onNodeWithTag(&quot;customerLogoutButton&quot;).performClick()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/queuemanagmentsystem/pages/AdminProfile.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/queuemanagmentsystem/pages/AdminProfile.kt" />
              <option name="originalContent" value="// File: AdminAccountScreen.kt&#10;package com.example.queuemanagmentsystem.pages&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.queuemanagmentsystem.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;&#10;@Composable&#10;fun AdminAccountScreen(navController: NavController) {&#10;    val red = Color(0xFFC62828)&#10;    val adminId = &quot;admin001&quot; // hardcoded for now&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        Text(&#10;            text = &quot;Admin Profile&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = red&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Profile picture placeholder&#10;        Box(&#10;            modifier = Modifier&#10;                .size(120.dp)&#10;                .clip(CircleShape)&#10;                .background(Color.LightGray),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = R.drawable.profilepic),&#10;                contentDescription = &quot;Profile Pic&quot;,&#10;                modifier = Modifier.size(60.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        Text(&quot;Admin ID: $adminId&quot;, fontSize = 18.sp)&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;        Text(&quot;Welcome back, Admin!&quot;, fontSize = 16.sp, color = Color.Gray)&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = {&#10;                // Sign out (safe even if not signed in)&#10;                try { FirebaseAuth.getInstance().signOut() } catch (_: Exception) {}&#10;&#10;                // Go back to Admin/Staff login and clear admin_home from the back stack&#10;                navController.navigate(&quot;admin_login&quot;) {&#10;                    popUpTo(&quot;admin_home&quot;) { inclusive = true }&#10;                    launchSingleTop = true&#10;                }&#10;            },&#10;            colors = ButtonDefaults.buttonColors(containerColor = red),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Log out&quot;, color = Color.White)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// File: AdminAccountScreen.kt&#10;package com.example.queuemanagmentsystem.pages&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.testTag&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.queuemanagmentsystem.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;&#10;@Composable&#10;fun AdminAccountScreen(navController: NavController) {&#10;    val red = Color(0xFFC62828)&#10;    val adminId = &quot;admin001&quot; // hardcoded for now&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(24.dp)&#10;            .testTag(&quot;adminProfileScreen&quot;),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        Text(&#10;            text = &quot;Admin Profile&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = red,&#10;            modifier = Modifier.testTag(&quot;adminProfileTitle&quot;)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Profile picture placeholder&#10;        Box(&#10;            modifier = Modifier&#10;                .size(120.dp)&#10;                .clip(CircleShape)&#10;                .background(Color.LightGray)&#10;                .testTag(&quot;adminProfileImage&quot;),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = R.drawable.profilepic),&#10;                contentDescription = &quot;Profile Pic&quot;,&#10;                modifier = Modifier.size(60.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        Text(&#10;            &quot;Admin ID: $adminId&quot;, &#10;            fontSize = 18.sp,&#10;            modifier = Modifier.testTag(&quot;adminIdText&quot;)&#10;        )&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;        Text(&#10;            &quot;Welcome back, Admin!&quot;, &#10;            fontSize = 16.sp, &#10;            color = Color.Gray,&#10;            modifier = Modifier.testTag(&quot;adminWelcomeText&quot;)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = {&#10;                // Sign out (safe even if not signed in)&#10;                try { FirebaseAuth.getInstance().signOut() } catch (_: Exception) {}&#10;&#10;                // Go back to Admin/Staff login and clear admin_home from the back stack&#10;                navController.navigate(&quot;admin_login&quot;) {&#10;                    popUpTo(&quot;admin_home&quot;) { inclusive = true }&#10;                    launchSingleTop = true&#10;                }&#10;            },&#10;            colors = ButtonDefaults.buttonColors(containerColor = red),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .testTag(&quot;adminLogoutButton&quot;)&#10;        ) {&#10;            Text(&quot;Log out&quot;, color = Color.White)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/queuemanagmentsystem/pages/CustomerProfile.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/queuemanagmentsystem/pages/CustomerProfile.kt" />
              <option name="originalContent" value="package com.example.queuemanagmentsystem.pages&#10;&#10;import android.net.Uri&#10;import android.widget.Toast&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.queuemanagmentsystem.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;&#10;// Enhanced color palette for People's Bank theme&#10;private val PrimaryYellow = Color(0xFFF9A825)&#10;private val SecondaryYellow = Color(0xFFFDD835)&#10;private val PrimaryRed = Color(0xFFC62828)&#10;private val SecondaryRed = Color(0xFFD32F2F)&#10;private val White = Color.White&#10;private val LightGray = Color(0xFFF5F5F5)&#10;private val DarkGray = Color(0xFF424242)&#10;private val SoftShadow = Color(0x1A000000)&#10;&#10;@OptIn(ExperimentalAnimationApi::class)&#10;@Composable&#10;fun CustomerProfileScreen(navController: NavController, darkMode: Boolean, onToggleDark: (Boolean) -&gt; Unit) {&#10;    val context = LocalContext.current&#10;&#10;    // memoize Firebase instances&#10;    val auth = remember { FirebaseAuth.getInstance() }&#10;    val firestore = remember { FirebaseFirestore.getInstance() }&#10;    val user = auth.currentUser&#10;&#10;    // state&#10;    var name by remember { mutableStateOf(&quot;Loading...&quot;) }&#10;    val email = user?.email ?: &quot;unknown@email.com&quot;&#10;    var profileImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var selectedTab by remember { mutableStateOf(&quot;Account&quot;) }&#10;    var isVisible by remember { mutableStateOf(false) }&#10;&#10;    // image picker&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        uri?.let {&#10;            profileImageUri = it&#10;            Toast.makeText(context, &quot;Profile picture updated!&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    // load username&#10;    LaunchedEffect(user?.uid) {&#10;        isVisible = true&#10;        user?.uid?.let { uid -&gt;&#10;            firestore.collection(&quot;users&quot;).document(uid).get()&#10;                .addOnSuccessListener { doc -&gt;&#10;                    name = doc.getString(&quot;username&quot;) ?: &quot;User&quot;&#10;                }&#10;        }&#10;    }&#10;&#10;    val backgroundColor = if (darkMode) Color(0xFF1A1A1A) else LightGray.copy(alpha = 0.3f)&#10;    val surfaceColor = if (darkMode) Color(0xFF2D2D2D) else White&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = if (darkMode) {&#10;                        listOf(&#10;                            Color(0xFF1A1A1A),&#10;                            Color(0xFF2D2D2D),&#10;                            Color(0xFF1A1A1A)&#10;                        )&#10;                    } else {&#10;                        listOf(&#10;                            PrimaryYellow.copy(alpha = 0.1f),&#10;                            White,&#10;                            backgroundColor&#10;                        )&#10;                    }&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(bottom = 80.dp)&#10;                .padding(horizontal = 24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(60.dp))&#10;&#10;            // Enhanced Header Card with Profile Info&#10;            AnimatedVisibility(&#10;                visible = isVisible,&#10;                enter = slideInVertically(&#10;                    initialOffsetY = { -100 },&#10;                    animationSpec = tween(800, easing = EaseOutBounce)&#10;                ) + fadeIn(animationSpec = tween(800))&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .shadow(&#10;                            elevation = 16.dp,&#10;                            shape = RoundedCornerShape(24.dp)&#10;                        ),&#10;                    shape = RoundedCornerShape(24.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = surfaceColor)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        // Enhanced profile avatar with glow effect&#10;                        EnhancedProfileAvatar(&#10;                            imageUri = profileImageUri,&#10;                            onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                            darkMode = darkMode&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                        Text(&#10;                            text = name,&#10;                            fontSize = 26.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = if (darkMode) White else DarkGray,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Card(&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = if (darkMode) Color(0xFF3A3A3A) else PrimaryYellow.copy(alpha = 0.1f)&#10;                            ),&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Email,&#10;                                    contentDescription = null,&#10;                                    tint = if (darkMode) PrimaryYellow else PrimaryRed,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = email,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (darkMode) Color.LightGray else DarkGray.copy(alpha = 0.8f),&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Enhanced Settings Section&#10;            AnimatedVisibility(&#10;                visible = isVisible,&#10;                enter = slideInHorizontally(&#10;                    initialOffsetX = { -300 },&#10;                    animationSpec = tween(1000, delayMillis = 200)&#10;                ) + fadeIn(animationSpec = tween(1000, delayMillis = 200))&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .shadow(&#10;                            elevation = 12.dp,&#10;                            shape = RoundedCornerShape(20.dp)&#10;                        ),&#10;                    shape = RoundedCornerShape(20.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = surfaceColor)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Settings,&#10;                                contentDescription = null,&#10;                                tint = if (darkMode) PrimaryYellow else PrimaryRed,&#10;                                modifier = Modifier.size(24.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = &quot;Preferences&quot;,&#10;                                fontSize = 22.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = if (darkMode) White else DarkGray&#10;                            )&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                        // Enhanced Dark mode toggle&#10;                        EnhancedDarkModeToggleRow(&#10;                            enabled = darkMode,&#10;                            onChange = onToggleDark&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Enhanced Account Actions Section&#10;            AnimatedVisibility(&#10;                visible = isVisible,&#10;                enter = slideInHorizontally(&#10;                    initialOffsetX = { 300 },&#10;                    animationSpec = tween(1000, delayMillis = 400)&#10;                ) + fadeIn(animationSpec = tween(1000, delayMillis = 400))&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .shadow(&#10;                            elevation = 12.dp,&#10;                            shape = RoundedCornerShape(20.dp)&#10;                        ),&#10;                    shape = RoundedCornerShape(20.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = surfaceColor)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccountCircle,&#10;                                contentDescription = null,&#10;                                tint = if (darkMode) PrimaryYellow else PrimaryRed,&#10;                                modifier = Modifier.size(24.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = &quot;Account Actions&quot;,&#10;                                fontSize = 22.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = if (darkMode) White else DarkGray&#10;                            )&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                        // Enhanced logout button&#10;                        Button(&#10;                            onClick = {&#10;                                auth.signOut()&#10;                                navController.navigate(&quot;register&quot;) {&#10;                                    popUpTo(&quot;landing&quot;) { inclusive = true }&#10;                                }&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(60.dp)&#10;                                .shadow(&#10;                                    elevation = 8.dp,&#10;                                    shape = RoundedCornerShape(16.dp)&#10;                                ),&#10;                            shape = RoundedCornerShape(16.dp),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = PrimaryRed&#10;                            )&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.ExitToApp,&#10;                                    contentDescription = null,&#10;                                    tint = White,&#10;                                    modifier = Modifier.size(22.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = &quot;Sign Out&quot;,&#10;                                    fontSize = 18.sp,&#10;                                    color = White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;        }&#10;&#10;        // Keep existing bottom navigation exactly as is&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            BottomNavBar(&#10;                selectedTab = selectedTab,&#10;                onTabSelected = { tab -&gt;&#10;                    selectedTab = tab&#10;                    when (tab) {&#10;                        &quot;Home&quot; -&gt; navController.navigate(&quot;landing&quot;)&#10;                        &quot;Slots&quot; -&gt; navController.navigate(&quot;slots&quot;)&#10;                        &quot;Account&quot; -&gt; navController.navigate(&quot;account&quot;)&#10;                    }&#10;                },&#10;                yellow = PrimaryYellow,&#10;                red = PrimaryRed&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EnhancedProfileAvatar(&#10;    imageUri: Uri?,&#10;    onClick: () -&gt; Unit,&#10;    darkMode: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(140.dp)&#10;            .shadow(16.dp, CircleShape)&#10;            .clickable(onClick = onClick),&#10;        shape = CircleShape,&#10;        colors = CardDefaults.cardColors(containerColor = White)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    brush = Brush.radialGradient(&#10;                        colors = if (darkMode) {&#10;                            listOf(&#10;                                Color(0xFF444444),&#10;                                Color(0xFF2A2A2A)&#10;                            )&#10;                        } else {&#10;                            listOf(&#10;                                PrimaryYellow.copy(alpha = 0.1f),&#10;                                White&#10;                            )&#10;                        }&#10;                    )&#10;                ),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            val painter = imageUri?.let { rememberAsyncImagePainter(it) }&#10;                ?: painterResource(id = R.drawable.profilepic)&#10;&#10;            Image(&#10;                painter = painter,&#10;                contentDescription = &quot;Profile Picture&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(CircleShape)&#10;            )&#10;&#10;            // Camera overlay&#10;            Card(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomEnd)&#10;                    .size(36.dp),&#10;                shape = CircleShape,&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = if (darkMode) PrimaryYellow else PrimaryRed&#10;                )&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.CameraAlt,&#10;                        contentDescription = &quot;Change Photo&quot;,&#10;                        tint = White,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EnhancedDarkModeToggleRow(enabled: Boolean, onChange: (Boolean) -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (enabled) Color(0xFF3A3A3A) else PrimaryYellow.copy(alpha = 0.1f)&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 20.dp, vertical = 20.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier.size(40.dp),&#10;                    shape = CircleShape,&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = if (enabled) PrimaryYellow.copy(alpha = 0.2f) else PrimaryRed.copy(alpha = 0.1f)&#10;                    )&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (enabled) Icons.Default.DarkMode else Icons.Default.LightMode,&#10;                            contentDescription = null,&#10;                            tint = if (enabled) PrimaryYellow else PrimaryRed,&#10;                            modifier = Modifier.size(20.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Dark Mode&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (enabled) PrimaryYellow else PrimaryRed&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = if (enabled) &quot;Comfortable for low light&quot; else &quot;Tap to reduce eye strain&quot;,&#10;                        fontSize = 13.sp,&#10;                        color = if (enabled) Color(0xFFBBBBBB) else Color(0xFF6D6D6D),&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;&#10;            Switch(&#10;                checked = enabled,&#10;                onCheckedChange = { onChange(it) },&#10;                colors = SwitchDefaults.colors(&#10;                    checkedThumbColor = PrimaryYellow,&#10;                    checkedTrackColor = PrimaryYellow.copy(alpha = 0.3f),&#10;                    uncheckedThumbColor = White,&#10;                    uncheckedTrackColor = PrimaryRed.copy(alpha = 0.3f)&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.queuemanagmentsystem.pages&#10;&#10;import android.net.Uri&#10;import android.widget.Toast&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.testTag&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.queuemanagmentsystem.R&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;&#10;// Enhanced color palette for People's Bank theme&#10;private val PrimaryYellow = Color(0xFFF9A825)&#10;private val SecondaryYellow = Color(0xFFFDD835)&#10;private val PrimaryRed = Color(0xFFC62828)&#10;private val SecondaryRed = Color(0xFFD32F2F)&#10;private val White = Color.White&#10;private val LightGray = Color(0xFFF5F5F5)&#10;private val DarkGray = Color(0xFF424242)&#10;private val SoftShadow = Color(0x1A000000)&#10;&#10;@OptIn(ExperimentalAnimationApi::class)&#10;@Composable&#10;fun CustomerProfileScreen(navController: NavController, darkMode: Boolean, onToggleDark: (Boolean) -&gt; Unit) {&#10;    val context = LocalContext.current&#10;&#10;    // memoize Firebase instances&#10;    val auth = remember { FirebaseAuth.getInstance() }&#10;    val firestore = remember { FirebaseFirestore.getInstance() }&#10;    val user = auth.currentUser&#10;&#10;    // state&#10;    var name by remember { mutableStateOf(&quot;Loading...&quot;) }&#10;    val email = user?.email ?: &quot;unknown@email.com&quot;&#10;    var profileImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var selectedTab by remember { mutableStateOf(&quot;Account&quot;) }&#10;    var isVisible by remember { mutableStateOf(false) }&#10;&#10;    // image picker&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        uri?.let {&#10;            profileImageUri = it&#10;            Toast.makeText(context, &quot;Profile picture updated!&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    // load username&#10;    LaunchedEffect(user?.uid) {&#10;        isVisible = true&#10;        user?.uid?.let { uid -&gt;&#10;            firestore.collection(&quot;users&quot;).document(uid).get()&#10;                .addOnSuccessListener { doc -&gt;&#10;                    name = doc.getString(&quot;username&quot;) ?: &quot;User&quot;&#10;                }&#10;        }&#10;    }&#10;&#10;    val backgroundColor = if (darkMode) Color(0xFF1A1A1A) else LightGray.copy(alpha = 0.3f)&#10;    val surfaceColor = if (darkMode) Color(0xFF2D2D2D) else White&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = if (darkMode) {&#10;                        listOf(&#10;                            Color(0xFF1A1A1A),&#10;                            Color(0xFF2D2D2D),&#10;                            Color(0xFF1A1A1A)&#10;                        )&#10;                    } else {&#10;                        listOf(&#10;                            PrimaryYellow.copy(alpha = 0.1f),&#10;                            White,&#10;                            backgroundColor&#10;                        )&#10;                    }&#10;                )&#10;            )&#10;            .testTag(&quot;customerProfileScreen&quot;)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(bottom = 80.dp)&#10;                .padding(horizontal = 24.dp)&#10;                .testTag(&quot;customerProfileContent&quot;),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(60.dp))&#10;&#10;            // Enhanced Header Card with Profile Info&#10;            AnimatedVisibility(&#10;                visible = isVisible,&#10;                enter = slideInVertically(&#10;                    initialOffsetY = { -100 },&#10;                    animationSpec = tween(800, easing = EaseOutBounce)&#10;                ) + fadeIn(animationSpec = tween(800))&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .shadow(&#10;                            elevation = 16.dp,&#10;                            shape = RoundedCornerShape(24.dp)&#10;                        )&#10;                        .testTag(&quot;profileInfoCard&quot;),&#10;                    shape = RoundedCornerShape(24.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = surfaceColor)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        // Enhanced profile avatar with glow effect&#10;                        EnhancedProfileAvatar(&#10;                            imageUri = profileImageUri,&#10;                            onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                            darkMode = darkMode&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                        Text(&#10;                            text = name,&#10;                            fontSize = 26.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = if (darkMode) White else DarkGray,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.testTag(&quot;customerNameText&quot;)&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Card(&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = if (darkMode) Color(0xFF3A3A3A) else PrimaryYellow.copy(alpha = 0.1f)&#10;                            ),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier.testTag(&quot;customerEmailCard&quot;)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Email,&#10;                                    contentDescription = null,&#10;                                    tint = if (darkMode) PrimaryYellow else PrimaryRed,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = email,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (darkMode) Color.LightGray else DarkGray.copy(alpha = 0.8f),&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    modifier = Modifier.testTag(&quot;customerEmailText&quot;)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Enhanced Settings Section&#10;            AnimatedVisibility(&#10;                visible = isVisible,&#10;                enter = slideInHorizontally(&#10;                    initialOffsetX = { -300 },&#10;                    animationSpec = tween(1000, delayMillis = 200)&#10;                ) + fadeIn(animationSpec = tween(1000, delayMillis = 200))&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .shadow(&#10;                            elevation = 12.dp,&#10;                            shape = RoundedCornerShape(20.dp)&#10;                        )&#10;                        .testTag(&quot;preferencesCard&quot;),&#10;                    shape = RoundedCornerShape(20.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = surfaceColor)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .testTag(&quot;preferencesHeader&quot;)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Settings,&#10;                                contentDescription = null,&#10;                                tint = if (darkMode) PrimaryYellow else PrimaryRed,&#10;                                modifier = Modifier.size(24.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = &quot;Preferences&quot;,&#10;                                fontSize = 22.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = if (darkMode) White else DarkGray&#10;                            )&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                        // Enhanced Dark mode toggle&#10;                        EnhancedDarkModeToggleRow(&#10;                            enabled = darkMode,&#10;                            onChange = onToggleDark&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Enhanced Account Actions Section&#10;            AnimatedVisibility(&#10;                visible = isVisible,&#10;                enter = slideInHorizontally(&#10;                    initialOffsetX = { 300 },&#10;                    animationSpec = tween(1000, delayMillis = 400)&#10;                ) + fadeIn(animationSpec = tween(1000, delayMillis = 400))&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .shadow(&#10;                            elevation = 12.dp,&#10;                            shape = RoundedCornerShape(20.dp)&#10;                        )&#10;                        .testTag(&quot;accountActionsCard&quot;),&#10;                    shape = RoundedCornerShape(20.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = surfaceColor)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .testTag(&quot;accountActionsHeader&quot;)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccountCircle,&#10;                                contentDescription = null,&#10;                                tint = if (darkMode) PrimaryYellow else PrimaryRed,&#10;                                modifier = Modifier.size(24.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = &quot;Account Actions&quot;,&#10;                                fontSize = 22.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = if (darkMode) White else DarkGray&#10;                            )&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                        // Enhanced logout button&#10;                        Button(&#10;                            onClick = {&#10;                                auth.signOut()&#10;                                navController.navigate(&quot;register&quot;) {&#10;                                    popUpTo(&quot;landing&quot;) { inclusive = true }&#10;                                }&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(60.dp)&#10;                                .shadow(&#10;                                    elevation = 8.dp,&#10;                                    shape = RoundedCornerShape(16.dp)&#10;                                )&#10;                                .testTag(&quot;customerLogoutButton&quot;),&#10;                            shape = RoundedCornerShape(16.dp),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = PrimaryRed&#10;                            )&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.ExitToApp,&#10;                                    contentDescription = null,&#10;                                    tint = White,&#10;                                    modifier = Modifier.size(22.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = &quot;Sign Out&quot;,&#10;                                    fontSize = 18.sp,&#10;                                    color = White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;        }&#10;&#10;        // Keep existing bottom navigation exactly as is&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;                .testTag(&quot;customerProfileBottomNav&quot;)&#10;        ) {&#10;            BottomNavBar(&#10;                selectedTab = selectedTab,&#10;                onTabSelected = { tab -&gt;&#10;                    selectedTab = tab&#10;                    when (tab) {&#10;                        &quot;Home&quot; -&gt; navController.navigate(&quot;landing&quot;)&#10;                        &quot;Slots&quot; -&gt; navController.navigate(&quot;slots&quot;)&#10;                        &quot;Account&quot; -&gt; navController.navigate(&quot;account&quot;)&#10;                    }&#10;                },&#10;                yellow = PrimaryYellow,&#10;                red = PrimaryRed&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EnhancedProfileAvatar(&#10;    imageUri: Uri?,&#10;    onClick: () -&gt; Unit,&#10;    darkMode: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(140.dp)&#10;            .shadow(16.dp, CircleShape)&#10;            .clickable(onClick = onClick)&#10;            .testTag(&quot;customerProfileAvatar&quot;),&#10;        shape = CircleShape,&#10;        colors = CardDefaults.cardColors(containerColor = White)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    brush = Brush.radialGradient(&#10;                        colors = if (darkMode) {&#10;                            listOf(&#10;                                Color(0xFF444444),&#10;                                Color(0xFF2A2A2A)&#10;                            )&#10;                        } else {&#10;                            listOf(&#10;                                PrimaryYellow.copy(alpha = 0.1f),&#10;                                White&#10;                            )&#10;                        }&#10;                    )&#10;                ),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            val painter = imageUri?.let { rememberAsyncImagePainter(it) }&#10;                ?: painterResource(id = R.drawable.profilepic)&#10;&#10;            Image(&#10;                painter = painter,&#10;                contentDescription = &quot;Profile Picture&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(CircleShape)&#10;                    .testTag(&quot;customerProfileImage&quot;)&#10;            )&#10;&#10;            // Camera overlay&#10;            Card(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomEnd)&#10;                    .size(36.dp)&#10;                    .testTag(&quot;customerProfileCameraButton&quot;),&#10;                shape = CircleShape,&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = if (darkMode) PrimaryYellow else PrimaryRed&#10;                )&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.CameraAlt,&#10;                        contentDescription = &quot;Change Photo&quot;,&#10;                        tint = White,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EnhancedDarkModeToggleRow(enabled: Boolean, onChange: (Boolean) -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .testTag(&quot;darkModeToggleCard&quot;),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (enabled) Color(0xFF3A3A3A) else PrimaryYellow.copy(alpha = 0.1f)&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 20.dp, vertical = 20.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .size(40.dp)&#10;                        .testTag(&quot;darkModeToggleIcon&quot;),&#10;                    shape = CircleShape,&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = if (enabled) PrimaryYellow.copy(alpha = 0.2f) else PrimaryRed.copy(alpha = 0.1f)&#10;                    )&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (enabled) Icons.Default.DarkMode else Icons.Default.LightMode,&#10;                            contentDescription = null,&#10;                            tint = if (enabled) PrimaryYellow else PrimaryRed,&#10;                            modifier = Modifier.size(20.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Dark Mode&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (enabled) PrimaryYellow else PrimaryRed,&#10;                        modifier = Modifier.testTag(&quot;darkModeToggleTitle&quot;)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = if (enabled) &quot;Comfortable for low light&quot; else &quot;Tap to reduce eye strain&quot;,&#10;                        fontSize = 13.sp,&#10;                        color = if (enabled) Color(0xFFBBBBBB) else Color(0xFF6D6D6D),&#10;                        fontWeight = FontWeight.Medium,&#10;                        modifier = Modifier.testTag(&quot;darkModeToggleDescription&quot;)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Switch(&#10;                checked = enabled,&#10;                onCheckedChange = { onChange(it) },&#10;                colors = SwitchDefaults.colors(&#10;                    checkedThumbColor = PrimaryYellow,&#10;                    checkedTrackColor = PrimaryYellow.copy(alpha = 0.3f),&#10;                    uncheckedThumbColor = White,&#10;                    uncheckedTrackColor = PrimaryRed.copy(alpha = 0.3f)&#10;                ),&#10;                modifier = Modifier.testTag(&quot;darkModeToggleSwitch&quot;)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>